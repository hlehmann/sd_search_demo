(function(a){if(typeof require==="function"&&typeof exports==="object"&&typeof module==="object"){module.exports=a}else{if(typeof define==="function"&&define.amd){define(["jquery"],function(b){return function(d,c){return a(d,c,b)}})}else{chai.use(function(c,b){return a(c,b,jQuery)})}}}(function(c,b,e){var g=b.inspect,a=b.flag;e=e||jQuery;e.fn.inspect=function(j){var i=e("<div />").append(this.clone());if(j!==undefined){var h=i.children();while(j-->0){h=h.children()}h.html("...")}return i.html()};var d={attr:"attribute",css:"CSS property"};for(var f in d){(function(i,h){c.Assertion.addMethod(i,function(j,k){var l=a(this,"object")[i](j);if(!a(this,"negate")||undefined===k){this.assert(undefined!==l,"expected #{this} to have a #{exp} "+h,"expected #{this} not to have a #{exp} "+h,j)}if(undefined!==k){this.assert(k===l,"expected #{this} to have a "+g(j)+" "+h+" with the value #{exp}, but the value was #{act}","expected #{this} not to have a "+g(j)+" "+h+" with the value #{act}",k,l)}a(this,"object",l)})})(f,d[f])}c.Assertion.addMethod("data",function(i,j){if(a(this,"negate")&&undefined!==j&&undefined===a(this,"object").data(i)){return}var h=new c.Assertion(a(this,"object").data());if(a(this,"negate")){h=h.not}return h.property(i,j)});c.Assertion.addMethod("class",function(h){this.assert(a(this,"object").hasClass(h),"expected #{this} to have class #{exp}","expected #{this} not to have class #{exp}",h)});c.Assertion.addMethod("id",function(h){this.assert(a(this,"object").attr("id")===h,"expected #{this} to have id #{exp}","expected #{this} not to have id #{exp}",h)});c.Assertion.addMethod("html",function(h){this.assert(a(this,"object").html()===h,"expected #{this} to have HTML #{exp}","expected #{this} not to have HTML #{exp}",h)});c.Assertion.addMethod("text",function(h){this.assert(a(this,"object").text()===h,"expected #{this} to have text #{exp}","expected #{this} not to have text #{exp}",h)});c.Assertion.addMethod("value",function(h){this.assert(a(this,"object").val()===h,"expected #{this} to have value #{exp}","expected #{this} not to have value #{exp}",h)});e.each(["visible","hidden","selected","checked","disabled"],function(j,h){c.Assertion.addProperty(h,function(){this.assert(a(this,"object").is(":"+h),"expected #{this} to be "+h,"expected #{this} not to be "+h)})});c.Assertion.overwriteProperty("exist",function(h){return function(){var i=a(this,"object");if(i instanceof e){this.assert(i.length>0,"expected "+g(i.selector)+" to exist","expected "+g(i.selector)+" not to exist")}else{h.apply(this,arguments)}}});c.Assertion.overwriteProperty("empty",function(h){return function(){var i=a(this,"object");if(i instanceof e){this.assert(i.is(":empty"),"expected #{this} to be empty","expected #{this} not to be empty")}else{h.apply(this,arguments)}}});c.Assertion.overwriteProperty("be",function(h){return function(){var i=function(j){var k=a(this,"object");if(k instanceof e){this.assert(k.is(j),"expected #{this} to be #{exp}","expected #{this} not to be #{exp}",j)}else{h.apply(this,arguments)}};i.__proto__=this;return i}});c.Assertion.overwriteMethod("match",function(h){return function(i){var j=a(this,"object");if(j instanceof e){this.assert(j.is(i),"expected #{this} to match #{exp}","expected #{this} not to match #{exp}",i)}else{h.apply(this,arguments)}}});c.Assertion.overwriteProperty("contain",function(h){return function(){h.call(this);var i=function(k){var j=a(this,"object");if(j instanceof e){this.assert(j.is(":contains('"+k+"')"),"expected #{this} to contain #{exp}","expected #{this} not to contain #{exp}",k)}else{Function.prototype.apply.call(h.call(this),this,arguments)}};i.__proto__=this;return i}});c.Assertion.overwriteProperty("have",function(h){return function(){var j=a(this,"object");if(j instanceof e){var i=function(k){this.assert(j.find(k).length>0,"expected #{this} to have #{exp}","expected #{this} not to have #{exp}",k)};i.__proto__=this;return i}else{h.call(this)}}})}));